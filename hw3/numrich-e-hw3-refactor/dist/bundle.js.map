{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://numrich-e-hw3-refactor/./src/utils.ts","webpack://numrich-e-hw3-refactor/./src/loader.ts","webpack://numrich-e-hw3-refactor/./src/main.ts"],"sourcesContent":["import { json } from \"body-parser\";\r\n\r\n//URL to PokeAPI\r\nconst poke_url = \"https://pokeapi.co/api/v2/\";\r\nlet storagePrefix = \"emn5100pkmn-\";\r\nlet regionKey = storagePrefix + \"region\";\r\n\r\nlet generations;\r\nlet pokeList;\r\nlet chosen;\r\nlet type;\r\nlet chosenSprite;\r\nlet lastChosen;\r\nlet tries;\r\nlet lastNumber = 0;\r\n\r\n//Sends XHR requests to the API\r\nconst getPokemonData = (searchTerm) => {\r\n    let xhr = new XMLHttpRequest();\r\n\r\n    xhr.onload = loadData;\r\n\r\n    xhr.open(\"GET\", searchTerm);\r\n    xhr.send();\r\n}\r\n\r\n//Gets a random Pokemon to be displayed\r\nconst getPokemon = () => {\r\n    //There is 3 tries, but the loop accounts for 0-2, which is three numbers\r\n    //This is resets the tries for every new Pokemon\r\n    tries = 2;\r\n\r\n    //Gets a random number corresponding to a Pokemon's Pokedex number, then uses getPokemonData() to get it's sprite by sending \r\n    //another API request\r\n    if (lastNumber == generations.length - 1) {\r\n        let rngNumber = Math.floor(Math.random() * pokeList.length);\r\n        chosen = pokeList[rngNumber];\r\n\r\n        //Get's the new URL by splitting the URL in the object and only getting the Dex Number\r\n        getPokemonData(poke_url + \"pokemon/\" + chosen.url.split('/')[6]);\r\n        document.querySelector(\"#status\").innerHTML = \"Loading...\";\r\n    }\r\n\r\n    //This is primarily to make sure that the program doesn't get a random Pokemon too early. If it does, it throws\r\n    //an error. It needs to make sure that all Pokemon that are supposed to be in the list are there. \r\n    else {\r\n        lastNumber++;\r\n    }\r\n}\r\n\r\n//Simply, this will display the Pokemon's type to the player\r\nconst getHint = () => {\r\n    let hint = \"\";\r\n\r\n    //Reset current hint;\r\n    document.querySelector(\"#hint\").innerHTML = \"\";\r\n\r\n    if (type != null) {\r\n        if (type.length == 2) {\r\n            hint = `The Pokémon's type is dual ${type[0].type.name}/${type[1].type.name}.`;\r\n        }\r\n\r\n        else {\r\n            hint = `The Pokémon's type is ${type[0].type.name}.`;\r\n        }\r\n    }\r\n\r\n    let hintButton = document.querySelector('.hint-button') as HTMLButtonElement;\r\n\r\n    hintButton.onclick = (e) => {\r\n        document.querySelector(\"#hint\").innerHTML = hint;\r\n    };\r\n}\r\n\r\n//Deals with the Pokemon objects. If there's multiple objects, merge the Pokemon Lists.\r\nconst loadData = (e) => {\r\n\r\n    let xhr = e.target;\r\n\r\n    let obj = null;\r\n\r\n    //Error response just in case of there being an error\r\n    if (xhr.responseText != \"Not Found\") {\r\n        obj = JSON.parse(xhr.responseText);\r\n    }\r\n\r\n    //If no Pokemon has been chosen yet, merge the Pokemon lists in the objects together and get a POkemon\r\n    if (chosen == null) {\r\n        let results = obj.pokemon_species;\r\n\r\n        for (let i = 0; i < results.length; i++) {\r\n            pokeList[pokeList.length] = results[i];\r\n        }\r\n\r\n        //Get random Pokemon when list no longer is added to\r\n        getPokemon();\r\n    }\r\n\r\n    //This runs if the Pokemon has already been chosen, and makes sure that the sprite information exists and is valid. It then\r\n    //saves the typing and front sprite\r\n    //If any of them are not, the program will pick a new Pokemon\r\n    else {\r\n        if (obj != null &&\r\n            obj.sprites.front_default != null &&\r\n            lastChosen != obj.name) {\r\n            chosenSprite = obj.sprites.front_default;\r\n            type = obj.types;\r\n            document.querySelector(\"#status\").innerHTML = \"Loaded!\";\r\n            lastChosen = obj.name\r\n            start();\r\n        }\r\n\r\n        else {\r\n            getPokemon();\r\n        }\r\n    }\r\n}\r\n\r\n//This checks if the user's entered name matches with the Pokemon's name\r\n//If it does, move onto the next Pokemon, but not before telling them they were correct\r\n//If it's not correct, say so, and remove a try. If they're out of tries, show the Pokemon and print the name, then move to the next Pokemon\r\nconst testAnswer = (input, chosenName, image) => {\r\n    if (input == chosenName) {\r\n        let answerBox = document.querySelector(\"#answerbox\") as HTMLInputElement;\r\n        answerBox.value = \"\";\r\n        image.style = \"filter: contrast(100%)\";\r\n        document.querySelector(\"#hint\").innerHTML = \"Correct!\";\r\n        console.clear;\r\n\r\n        setTimeout(function () { getPokemon() }, 1500);\r\n    }\r\n\r\n    else if (input != chosenName && tries <= 0) {\r\n        document.querySelector(\"#hint\").innerHTML = \"The Pokémon was \" + chosenName\r\n        document.querySelector('#pokemon').setAttribute(\"filter\", \"contrast(100%)\");\r\n        setTimeout(function () {\r\n            getPokemon();\r\n        }, 2000)\r\n    }\r\n\r\n    else {\r\n        document.querySelector(\"#hint\").innerHTML = \"Incorrect\";\r\n        tries--;\r\n        setTimeout(function () {\r\n            document.querySelector(\"#hint\").innerHTML = \"\";\r\n        }, 1500)\r\n    }\r\n}\r\n\r\n//Puts the game in motion\r\nconst start = () => {\r\n    document.querySelector('#game').setAttribute(\"height\", \"100%\");\r\n\r\n    //Get sprite displayed\r\n    document.querySelector(\"#gamewindow\").innerHTML = `<img id=\"pokemon\" src='${chosenSprite}' title='' class='image has-text-centered is-flex is-128x128'>`;\r\n\r\n    //Make sprite a silhouette\r\n    let image = document.querySelector(\"#pokemon\");\r\n    image.setAttribute(\"filter\", \"contrast(0%)\");\r\n\r\n    //Initialize hint button\r\n    getHint();\r\n\r\n    //Create answer box\r\n    let answer = document.querySelector(\"#answer\");\r\n    answer.innerHTML = `Answer: <input type=\"text\" id=\"answerbox\"></input>&nbsp<button id=\"enter\">Enter</button>`;\r\n\r\n    let enter = document.querySelector(\"#enter\") as HTMLInputElement;\r\n\r\n    //When enter is clicked, check if the input is correct.\r\n    enter.onclick = (e) => {\r\n        let chosenName = chosen.name.toUpperCase();\r\n        let input = document.querySelector(\"#answerbox\").innerHTML.toUpperCase();\r\n        console.log(input);\r\n\r\n        //Some names have -s, so I want to make sure I only use the parts of the names before the -.\r\n        if (chosenName.split(\"-\")[0] == \"TAPU\" ||\r\n            chosenName.split(\"-\")[0] == \"MIME\") {\r\n            chosenName = chosenName.replace('-', ' ').trim();\r\n        }\r\n\r\n        //I'm at my wits end with these. There is SO MANY names to account for.\r\n        //These are clauses for the Pokemon with special characters in their names, causing the API to put the name in a way that\r\n        //conflicts with the player's answer, and the code to get the answer\r\n        else if (chosenName == \"MR-MIME\") {\r\n            chosenName = \"Mr. Mime\".replace('.', ' ').trim().toUpperCase();\r\n        }\r\n\r\n        else if (chosenName == \"MR-RIME\") {\r\n            chosenName = \"Mr. Rime\".replace('.', ' ').trim().toUpperCase();\r\n        }\r\n\r\n        else if (chosenName == \"TYPE-NULL\") {\r\n            chosenName = \"Type: Null\".replace('.', ' ').trim().toUpperCase();\r\n        }\r\n\r\n        else if (chosenName == \"PORYGON-Z\" ||\r\n            chosenName == \"HO-OH\") {\r\n            chosenName = chosenName.trim().toUpperCase();\r\n        }\r\n\r\n        else if (chosenName == \"FARFETCHD\") {\r\n            chosenName = \"Farfetch'd\".replace('.', ' ').trim().toUpperCase();\r\n        }\r\n\r\n        else if (chosenName == \"SIRFETCHD\") {\r\n            chosenName = \"Sirfetch'd\".trim().toUpperCase();\r\n        }\r\n\r\n        //Pokemon with \"-\" in the name\r\n        else if (chosenName.split('-')[1] == \"O\" ||\r\n            chosenName.split('-')[1] == \"OH\") {\r\n            chosenName = chosenName.toUpperCase();\r\n        }\r\n\r\n        //Some Pokemon in the API have different forms that end in things like \"-m\" or \"-f\" in the API.\r\n        //No player is going to type these, so I aimed to remove them\r\n        else {\r\n            chosenName = chosenName.split(\"-\")[0];\r\n        }\r\n\r\n        //This is to ensure the player doesn't accidentally enter without typing and losing a try\r\n        if (input != \"\") {\r\n            input.replace('.', ' ').trim();\r\n            testAnswer(input, chosenName, image);\r\n        }\r\n\r\n        else {\r\n            document.querySelector(\"#hint\").innerHTML = \"You get three tries, so just enter a name and see!\";\r\n        }\r\n    };\r\n}\r\n\r\n//Make the Play button the ony button on screen until it is pressed\r\nconst playButtonClicked = () => {\r\n\r\n    //Make room for hint button\r\n    document.querySelector('.play-button').setAttribute(\"width\", \"55%\");\r\n    document.querySelector('.hint-button').setAttribute(\"display\", \"block\");\r\n\r\n    //clear Pokemon Array\r\n    pokeList = new Array();\r\n    lastChosen = chosen;\r\n\r\n    tries = 2;\r\n\r\n    //Reset\r\n    chosen = null;\r\n    chosenSprite = null;\r\n    type = null;\r\n    lastNumber = 0;\r\n\r\n    //Array of generations\r\n    generations = document.querySelectorAll(\"input[type=checkbox]:checked\");\r\n\r\n    let checkedList: string[] = new Array();\r\n\r\n    let searchTerm = \"\";\r\n\r\n    //Gets a list of every pokemon generation and gets data from the API for each\r\n    if (generations.length > 0) {\r\n        for (let gen = 0; gen < generations.length; gen++) {\r\n            searchTerm = poke_url + \"generation/\" + generations[gen].value;\r\n            checkedList[gen] = generations[gen].value;\r\n            getPokemonData(searchTerm);\r\n        }\r\n\r\n    }\r\n\r\n    let list = checkedList.toString();\r\n\r\n    //Set local storage to the list of checked checkboxes\r\n    localStorage.setItem(regionKey, list);\r\n}\r\n\r\nexport { playButtonClicked, regionKey }","import * as main from \"./main\";\r\n\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\t\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}","import * as utils from './utils';\r\n\r\nconst init = () => {\r\n    //Set local storage preset\r\n    const storedRegion = localStorage.getItem(utils.regionKey);\r\n\r\n    //Perform if there is local data\r\n    if (storedRegion) {\r\n        let numberList = storedRegion.split(',');\r\n        let testList = document.querySelector(\"#inputs\");\r\n        let checkList = document.querySelectorAll(\"input[type=checkbox]:checked\");\r\n\r\n        //For each checkbox, see if it's in the local Storage list. If it's not, remove the check\r\n        for (let region = 0; region < checkList.length; region++) {\r\n            let isChecked = false;\r\n\r\n            for (let gen = 0; gen < numberList.length; gen++) {\r\n                let element = checkList[region] as HTMLInputElement;\r\n                if  (element.value == numberList[gen]) {\r\n                    isChecked = true;\r\n                }\r\n            }\r\n\r\n            if (!isChecked) {\r\n                let checkItem = document.querySelector(`input[value='${checkList[region]}']`) as HTMLInputElement;\r\n                checkItem.checked = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const playButton = document.querySelector(\".play-button\") as HTMLButtonElement;\r\n\r\n    playButton.onclick = e => {\r\n        const target = e.target as HTMLStyleElement;\r\n\r\n        utils.playButtonClicked();\r\n        target.setAttribute(\"align-items\", \"Center\");\r\n    }\r\n};\r\n\r\nexport { init };"],"names":["generations","pokeList","chosen","type","chosenSprite","lastChosen","tries","poke_url","regionKey","storagePrefix","lastNumber","getPokemonData","searchTerm","xhr","XMLHttpRequest","onload","loadData","open","send","getPokemon","length","rngNumber","Math","floor","random","url","split","document","querySelector","innerHTML","e","target","obj","responseText","JSON","parse","results","pokemon_species","i","sprites","front_default","name","types","start","setAttribute","hint","image","onclick","chosenName","toUpperCase","input","console","log","replace","trim","value","style","clear","setTimeout","testAnswer","window","storedRegion","localStorage","getItem","numberList","checkList","querySelectorAll","region","isChecked","gen","checked","Array","checkedList","list","toString","setItem"],"sourceRoot":""}